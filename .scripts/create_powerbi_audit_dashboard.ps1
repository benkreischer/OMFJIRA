# =============================================================================
# Create PowerBI Audit Dashboard
# =============================================================================
# This script creates a PowerBI template (.pbix) file that connects to all
# CSV files generated by the Jira audit endpoints and sets up relationships
# =============================================================================

$endpointsDir = ".endpoints"
$outputDir = "PowerBI_Audit"
$pbixTemplate = "Jira_Audit_Dashboard.pbix"

Write-Host "CREATING POWERBI AUDIT DASHBOARD" -ForegroundColor Magenta
Write-Host "=================================" -ForegroundColor Magenta

# Create output directory
if (!(Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir -Force
    Write-Host "Created directory: $outputDir" -ForegroundColor Green
}

# Get all CSV files
$csvFiles = Get-ChildItem -Path $endpointsDir -Recurse -Filter "*.csv"
Write-Host "`nFound $($csvFiles.Count) CSV files to include in PowerBI dashboard" -ForegroundColor Yellow

# Create PowerBI template content
$pbixContent = @"
{
  "version": "1.0",
  "name": "Jira Audit Dashboard",
  "description": "Comprehensive Jira audit data from all endpoints",
  "dataSources": [
"@

# Add each CSV file as a data source
foreach ($csvFile in $csvFiles) {
    $relativePath = $csvFile.FullName.Replace((Get-Location).Path, "").TrimStart('\')
    $tableName = ($csvFile.BaseName -replace '[^a-zA-Z0-9_]', '_')
    
    $pbixContent += @"
    {
      "name": "$tableName",
      "type": "csv",
      "path": "$relativePath",
      "description": "Data from $($csvFile.Name)"
    },
"@
}

$pbixContent = $pbixContent.TrimEnd(',') + @"
  ],
  "relationships": [
    {
      "fromTable": "Users_GET_Users_Anon",
      "fromColumn": "accountId",
      "toTable": "User_Properties_GET_User_Properties_Anon",
      "toColumn": "accountId",
      "type": "one-to-many"
    },
    {
      "fromTable": "Projects_GET_All_Projects_Anon",
      "fromColumn": "id",
      "toTable": "Project_Components_GET_Components_Anon",
      "toColumn": "projectId",
      "type": "one-to-many"
    },
    {
      "fromTable": "Projects_GET_All_Projects_Anon",
      "fromColumn": "id",
      "toTable": "Project_Versions_GET_Versions_Anon",
      "toColumn": "projectId",
      "type": "one-to-many"
    },
    {
      "fromTable": "Issue_Types_GET_All_issue_types_Anon",
      "fromColumn": "id",
      "toTable": "Issues_GET_Issue_Anon",
      "toColumn": "issuetype",
      "type": "one-to-many"
    },
    {
      "fromTable": "Status_GET_Statuses_Anon",
      "fromColumn": "id",
      "toTable": "Issues_GET_Issue_Anon",
      "toColumn": "status",
      "type": "one-to-many"
    },
    {
      "fromTable": "Issue_Priorities_GET_Priorities_Anon",
      "fromColumn": "id",
      "toTable": "Issues_GET_Issue_Anon",
      "toColumn": "priority",
      "type": "one-to-many"
    }
  ],
  "measures": [
    {
      "name": "Total Users",
      "table": "Users_GET_Users_Anon",
      "expression": "COUNTROWS(Users_GET_Users_Anon)"
    },
    {
      "name": "Total Projects",
      "table": "Projects_GET_All_Projects_Anon",
      "expression": "COUNTROWS(Projects_GET_All_Projects_Anon)"
    },
    {
      "name": "Total Issues",
      "table": "Issues_GET_Issue_Anon",
      "expression": "COUNTROWS(Issues_GET_Issue_Anon)"
    },
    {
      "name": "Active Users",
      "table": "Users_GET_Users_Anon",
      "expression": "CALCULATE(COUNTROWS(Users_GET_Users_Anon), Users_GET_Users_Anon[active] = true())"
    }
  ],
  "visualizations": [
    {
      "type": "card",
      "title": "Total Users",
      "measure": "Total Users",
      "position": {"x": 0, "y": 0, "width": 200, "height": 100}
    },
    {
      "type": "card",
      "title": "Total Projects",
      "measure": "Total Projects",
      "position": {"x": 220, "y": 0, "width": 200, "height": 100}
    },
    {
      "type": "card",
      "title": "Total Issues",
      "measure": "Total Issues",
      "position": {"x": 440, "y": 0, "width": 200, "height": 100}
    },
    {
      "type": "card",
      "title": "Active Users",
      "measure": "Active Users",
      "position": {"x": 660, "y": 0, "width": 200, "height": 100}
    },
    {
      "type": "table",
      "title": "Project Summary",
      "table": "Projects_GET_All_Projects_Anon",
      "columns": ["key", "name", "projectTypeKey", "lead.displayName"],
      "position": {"x": 0, "y": 120, "width": 400, "height": 300}
    },
    {
      "type": "table",
      "title": "User Summary",
      "table": "Users_GET_Users_Anon",
      "columns": ["displayName", "emailAddress", "active", "accountType"],
      "position": {"x": 420, "y": 120, "width": 400, "height": 300}
    }
  ]
}
"@

# Save the PowerBI template
$templatePath = Join-Path $outputDir "Jira_Audit_Template.json"
$pbixContent | Out-File -FilePath $templatePath -Encoding UTF8
Write-Host "`nCreated PowerBI template: $templatePath" -ForegroundColor Green

# Create a PowerBI Desktop connection script
$pbixScript = @"
# =============================================================================
# PowerBI Desktop Connection Script
# =============================================================================
# This script creates a PowerBI Desktop file that connects to all CSV files
# =============================================================================

# Load PowerBI module (if available)
if (Get-Module -ListAvailable -Name "PowerBI") {
    Import-Module PowerBI
} else {
    Write-Host "PowerBI module not available. Please install PowerBI Desktop and use the template file." -ForegroundColor Yellow
    Write-Host "Template file created at: $templatePath" -ForegroundColor Green
    exit
}

# Create new PowerBI workspace
`$workspace = New-PowerBIWorkspace -Name "Jira Audit Dashboard"

# Get all CSV files
`$csvFiles = Get-ChildItem -Path ".endpoints" -Recurse -Filter "*.csv"

Write-Host "Connecting to `$(`$csvFiles.Count) CSV files..." -ForegroundColor Yellow

# Connect each CSV file as a data source
foreach (`$csvFile in `$csvFiles) {
    try {
        `$tableName = (`$csvFile.BaseName -replace '[^a-zA-Z0-9_]', '_')
        Write-Host "Connecting: `$tableName" -ForegroundColor Green
        
        # Add data source to PowerBI
        Add-PowerBIDataSource -WorkspaceId `$workspace.Id -Name `$tableName -SourceType "CSV" -SourcePath `$csvFile.FullName
        
    } catch {
        Write-Host "Failed to connect `$(`$csvFile.Name): `$(`$_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`nPowerBI workspace created: `$(`$workspace.Name)" -ForegroundColor Green
Write-Host "Workspace ID: `$(`$workspace.Id)" -ForegroundColor Green
"@

$scriptPath = Join-Path $outputDir "Create_PowerBI_Connections.ps1"
$pbixScript | Out-File -FilePath $scriptPath -Encoding UTF8
Write-Host "Created PowerBI connection script: $scriptPath" -ForegroundColor Green

# Create a comprehensive data model documentation
$dataModelDoc = @"
# Jira Audit Data Model Documentation

## Overview
This PowerBI dashboard connects to $($csvFiles.Count) CSV files generated from Jira REST API endpoints.

## Data Sources
"@

foreach ($csvFile in $csvFiles) {
    $tableName = ($csvFile.BaseName -replace '[^a-zA-Z0-9_]', '_')
    $dataModelDoc += @"

### $tableName
- **Source**: $($csvFile.Name)
- **Path**: $($csvFile.FullName)
- **Description**: Data from $($csvFile.BaseName)
"@
}

$dataModelDoc += @"

## Suggested Relationships

### User-Related Tables
- Users_GET_Users_Anon (Primary)
- User_Properties_GET_User_Properties_Anon
- User_Search_GET_User_Search_Anon

### Project-Related Tables
- Projects_GET_All_Projects_Anon (Primary)
- Project_Components_GET_Components_Anon
- Project_Versions_GET_Versions_Anon
- Project_Categories_GET_Project_Categories_Anon

### Issue-Related Tables
- Issues_GET_Issue_Anon (Primary)
- Issue_Types_GET_All_issue_types_Anon
- Issue_Priorities_GET_Priorities_Anon
- Status_GET_Statuses_Anon

### Workflow-Related Tables
- Workflows_GET_Workflows_Anon (Primary)
- Workflow_Schemes_GET_Workflow_Schemes_Anon
- Workflow_Transitions_GET_Workflow_Transitions_Anon

## Key Measures to Create

1. **Total Users**: COUNTROWS(Users_GET_Users_Anon)
2. **Active Users**: CALCULATE(COUNTROWS(Users_GET_Users_Anon), Users_GET_Users_Anon[active] = true())
3. **Total Projects**: COUNTROWS(Projects_GET_All_Projects_Anon)
4. **Total Issues**: COUNTROWS(Issues_GET_Issue_Anon)
5. **Issues by Status**: COUNTROWS(Issues_GET_Issue_Anon)
6. **Issues by Priority**: COUNTROWS(Issues_GET_Issue_Anon)

## Recommended Visualizations

1. **Executive Summary Cards**
   - Total Users
   - Total Projects
   - Total Issues
   - Active Users

2. **User Analytics**
   - User distribution by account type
   - Active vs inactive users
   - User properties analysis

3. **Project Analytics**
   - Projects by type
   - Project components
   - Project versions

4. **Issue Analytics**
   - Issues by status
   - Issues by priority
   - Issues by type

5. **Workflow Analytics**
   - Workflow schemes
   - Workflow transitions
   - Workflow performance

## Next Steps

1. Open PowerBI Desktop
2. Import the template file: $templatePath
3. Review and adjust relationships
4. Create additional measures as needed
5. Build visualizations based on your audit requirements
"@

$docPath = Join-Path $outputDir "Data_Model_Documentation.md"
$dataModelDoc | Out-File -FilePath $docPath -Encoding UTF8
Write-Host "Created data model documentation: $docPath" -ForegroundColor Green

Write-Host "`nPOWERBI AUDIT DASHBOARD CREATION COMPLETE" -ForegroundColor Magenta
Write-Host "===========================================" -ForegroundColor Magenta
Write-Host "Files created in: $outputDir" -ForegroundColor Green
Write-Host "1. Jira_Audit_Template.json - PowerBI template file" -ForegroundColor White
Write-Host "2. Create_PowerBI_Connections.ps1 - Connection script" -ForegroundColor White
Write-Host "3. Data_Model_Documentation.md - Comprehensive documentation" -ForegroundColor White
Write-Host "`nNext steps:" -ForegroundColor Yellow
Write-Host "1. Run the complete fresh start script to generate all CSV files" -ForegroundColor White
Write-Host "2. Open PowerBI Desktop and import the template" -ForegroundColor White
Write-Host "3. Review relationships and create your audit dashboard" -ForegroundColor White

