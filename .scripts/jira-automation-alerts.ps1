# =============================================================================
# JIRA AUTOMATION & ALERTING SYSTEM
# =============================================================================

# Advanced automation script that monitors Jira data and sends alerts
# This script surpasses Atlassian Analytics by providing real-time monitoring
# and automated insights that Atlassian Analytics cannot provide

param(
    [string]$AlertType = "all",
    [string]$SlackWebhook = "",
    [string]$TeamsWebhook = "",
    [string]$EmailRecipients = "",
    [switch]$EnableNotifications = $false
)

# Configuration
$JiraBaseUrl = $env:JIRA_BASE_URL
$JiraUsername = $env:JIRA_USERNAME
$JiraApiToken = $env:JIRA_API_TOKEN

# Alert thresholds
$Thresholds = @{
    SprintCompletionWarning = 60
    SprintCompletionCritical = 40
    ResourceOverloadWarning = 15
    ResourceOverloadCritical = 20
    QualityBreachWarning = 20
    QualityBreachCritical = 25
    DeadlineRiskWarning = 10
    DeadlineRiskCritical = 20
}

# =============================================================================
# CORE FUNCTIONS
# =============================================================================

function Get-JiraData {
    param(
        [string]$Endpoint,
        [string]$JQL = ""
    )
    
    $headers = @{
        "Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$JiraUsername`:$JiraApiToken"))
        "Content-Type" = "application/json"
    }
    
    $url = if ($JQL) {
        "$JiraBaseUrl/search?jql=$([Uri]::EscapeDataString($JQL))&maxResults=999999"
    } else {
        "$JiraBaseUrl/$Endpoint"
    }
    
    try {
        $response = Invoke-RestMethod -Uri $url -Headers $headers -Method GET
        return $response
    }
    catch {
        Write-Error "Failed to get Jira data: $($_.Exception.Message)"
        return $null
    }
}

function Send-Alert {
    param(
        [string]$Title,
        [string]$Message,
        [string]$Severity = "Warning",
        [string]$Type = "General"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $alertMessage = @"
ðŸš¨ **$Title** - $timestamp
**Severity:** $Severity
**Type:** $Type

$Message

---
*Generated by Jira Analytics Automation System*
"@
    
    # Send to Slack if configured
    if ($SlackWebhook -and $EnableNotifications) {
        $slackPayload = @{
            text = $alertMessage
            username = "Jira Analytics Bot"
            icon_emoji = ":warning:"
        } | ConvertTo-Json
        
        try {
            Invoke-RestMethod -Uri $SlackWebhook -Method POST -Body $slackPayload -ContentType "application/json"
            Write-Host "Alert sent to Slack: $Title" -ForegroundColor Green
        }
        catch {
            Write-Warning "Failed to send Slack alert: $($_.Exception.Message)"
        }
    }
    
    # Send to Teams if configured
    if ($TeamsWebhook -and $EnableNotifications) {
        $teamsPayload = @{
            "@type" = "MessageCard"
            "@context" = "http://schema.org/extensions"
            "themeColor" = if ($Severity -eq "Critical") { "FF0000" } else { "FFA500" }
            "summary" = $Title
            "sections" = @(
                @{
                    "activityTitle" = $Title
                    "activitySubtitle" = "Jira Analytics Alert"
                    "activityImage" = "https://via.placeholder.com/64x64/FFA500/FFFFFF?text=J"
                    "facts" = @(
                        @{
                            "name" = "Severity"
                            "value" = $Severity
                        },
                        @{
                            "name" = "Type"
                            "value" = $Type
                        },
                        @{
                            "name" = "Time"
                            "value" = $timestamp
                        }
                    )
                    "text" = $Message
                }
            )
        } | ConvertTo-Json -Depth 10
        
        try {
            Invoke-RestMethod -Uri $TeamsWebhook -Method POST -Body $teamsPayload -ContentType "application/json"
            Write-Host "Alert sent to Teams: $Title" -ForegroundColor Green
        }
        catch {
            Write-Warning "Failed to send Teams alert: $($_.Exception.Message)"
        }
    }
    
    # Send email if configured
    if ($EmailRecipients -and $EnableNotifications) {
        try {
            $subject = "[$Severity] Jira Analytics Alert: $Title"
            $body = $alertMessage
            Send-MailMessage -To $EmailRecipients -Subject $subject -Body $body -SmtpServer "smtp.company.com"
            Write-Host "Alert sent via email: $Title" -ForegroundColor Green
        }
        catch {
            Write-Warning "Failed to send email alert: $($_.Exception.Message)"
        }
    }
    
    # Log to file
    $logEntry = "$timestamp - [$Severity] $Type`: $Title - $Message"
    Add-Content -Path "jira-alerts.log" -Value $logEntry
}

# =============================================================================
# MONITORING FUNCTIONS
# =============================================================================

function Monitor-SprintProgress {
    Write-Host "Monitoring sprint progress..." -ForegroundColor Cyan
    
    $sprintData = Get-JiraData -JQL "ORDER BY updated DESC"
    if (-not $sprintData) { return }
    
    $sprints = @{}
    foreach ($issue in $sprintData.issues) {
        $sprint = $issue.fields.customfield_10020
        if ($sprint) {
            if (-not $sprints.ContainsKey($sprint)) {
                $sprints[$sprint] = @{
                    Total = 0
                    Completed = 0
                    InProgress = 0
                    ToDo = 0
                }
            }
            
            $sprints[$sprint].Total++
            switch ($issue.fields.status.name) {
                "Done" { $sprints[$sprint].Completed++ }
                "In Progress" { $sprints[$sprint].InProgress++ }
                "To Do" { $sprints[$sprint].ToDo++ }
            }
        }
    }
    
    foreach ($sprint in $sprints.Keys) {
        $data = $sprints[$sprint]
        $completionRate = if ($data.Total -gt 0) { ($data.Completed / $data.Total) * 100 } else { 0 }
        
        if ($completionRate -lt $Thresholds.SprintCompletionCritical) {
            Send-Alert -Title "Critical Sprint Progress Alert" -Message "Sprint '$sprint' is at critical completion rate: $([math]::Round($completionRate, 1))%. Only $($data.Completed) of $($data.Total) issues completed." -Severity "Critical" -Type "Sprint Progress"
        }
        elseif ($completionRate -lt $Thresholds.SprintCompletionWarning) {
            Send-Alert -Title "Sprint Progress Warning" -Message "Sprint '$sprint' completion rate is below threshold: $([math]::Round($completionRate, 1))%. $($data.Completed) of $($data.Total) issues completed." -Severity "Warning" -Type "Sprint Progress"
        }
    }
}

function Monitor-ResourceOverload {
    Write-Host "Monitoring resource overload..." -ForegroundColor Cyan
    
    $issuesData = Get-JiraData -JQL "assignee is not EMPTY ORDER BY updated DESC"
    if (-not $issuesData) { return }
    
    $assigneeWorkload = @{}
    foreach ($issue in $issuesData.issues) {
        $assignee = $issue.fields.assignee.displayName
        if (-not $assigneeWorkload.ContainsKey($assignee)) {
            $assigneeWorkload[$assignee] = @{
                Total = 0
                Active = 0
                HighPriority = 0
                Overdue = 0
            }
        }
        
        $assigneeWorkload[$assignee].Total++
        if ($issue.fields.status.name -ne "Done") {
            $assigneeWorkload[$assignee].Active++
        }
        if ($issue.fields.priority.name -in @("High", "Highest")) {
            $assigneeWorkload[$assignee].HighPriority++
        }
        if ($issue.fields.duedate -and [DateTime]::Parse($issue.fields.duedate) -lt (Get-Date) -and $issue.fields.status.name -ne "Done") {
            $assigneeWorkload[$assignee].Overdue++
        }
    }
    
    foreach ($assignee in $assigneeWorkload.Keys) {
        $data = $assigneeWorkload[$assignee]
        $workloadScore = $data.Active + ($data.HighPriority * 2) + ($data.Overdue * 3)
        
        if ($workloadScore -gt $Thresholds.ResourceOverloadCritical) {
            Send-Alert -Title "Critical Resource Overload" -Message "Team member '$assignee' is critically overloaded. Workload score: $workloadScore. Active issues: $($data.Active), High priority: $($data.HighPriority), Overdue: $($data.Overdue)" -Severity "Critical" -Type "Resource Management"
        }
        elseif ($workloadScore -gt $Thresholds.ResourceOverloadWarning) {
            Send-Alert -Title "Resource Overload Warning" -Message "Team member '$assignee' is approaching overload. Workload score: $workloadScore. Active issues: $($data.Active), High priority: $($data.HighPriority), Overdue: $($data.Overdue)" -Severity "Warning" -Type "Resource Management"
        }
    }
}

function Monitor-QualityThresholds {
    Write-Host "Monitoring quality thresholds..." -ForegroundColor Cyan
    
    $issuesData = Get-JiraData -JQL "ORDER BY created DESC"
    if (-not $issuesData) { return }
    
    $projectQuality = @{}
    foreach ($issue in $issuesData.issues) {
        $project = $issue.fields.project.key
        if (-not $projectQuality.ContainsKey($project)) {
            $projectQuality[$project] = @{
                Total = 0
                Bugs = 0
                HighPriorityBugs = 0
                Reopened = 0
            }
        }
        
        $projectQuality[$project].Total++
        if ($issue.fields.issuetype.name -eq "Bug") {
            $projectQuality[$project].Bugs++
            if ($issue.fields.priority.name -in @("High", "Highest")) {
                $projectQuality[$project].HighPriorityBugs++
            }
        }
        if ($issue.fields.status.name -eq "Reopened") {
            $projectQuality[$project].Reopened++
        }
    }
    
    foreach ($project in $projectQuality.Keys) {
        $data = $projectQuality[$project]
        $bugRate = if ($data.Total -gt 0) { ($data.Bugs / $data.Total) * 100 } else { 0 }
        $criticalBugRate = if ($data.Total -gt 0) { ($data.HighPriorityBugs / $data.Total) * 100 } else { 0 }
        $reopenedRate = if ($data.Total -gt 0) { ($data.Reopened / $data.Total) * 100 } else { 0 }
        
        if ($bugRate -gt $Thresholds.QualityBreachCritical -or $criticalBugRate -gt 10 -or $reopenedRate -gt 15) {
            Send-Alert -Title "Critical Quality Breach" -Message "Project '$project' has critical quality issues. Bug rate: $([math]::Round($bugRate, 1))%, Critical bugs: $([math]::Round($criticalBugRate, 1))%, Reopened: $([math]::Round($reopenedRate, 1))%" -Severity "Critical" -Type "Quality Management"
        }
        elseif ($bugRate -gt $Thresholds.QualityBreachWarning -or $criticalBugRate -gt 8 -or $reopenedRate -gt 12) {
            Send-Alert -Title "Quality Warning" -Message "Project '$project' quality metrics are concerning. Bug rate: $([math]::Round($bugRate, 1))%, Critical bugs: $([math]::Round($criticalBugRate, 1))%, Reopened: $([math]::Round($reopenedRate, 1))%" -Severity "Warning" -Type "Quality Management"
        }
    }
}

function Monitor-DeadlineRisks {
    Write-Host "Monitoring deadline risks..." -ForegroundColor Cyan
    
    $issuesData = Get-JiraData -JQL "duedate is not EMPTY ORDER BY duedate ASC"
    if (-not $issuesData) { return }
    
    $projectDeadlines = @{}
    foreach ($issue in $issuesData.issues) {
        $project = $issue.fields.project.key
        if (-not $projectDeadlines.ContainsKey($project)) {
            $projectDeadlines[$project] = @{
                TotalWithDueDates = 0
                Overdue = 0
                DueThisWeek = 0
                DueNextWeek = 0
            }
        }
        
        $projectDeadlines[$project].TotalWithDueDates++
        $dueDate = [DateTime]::Parse($issue.fields.duedate)
        $now = Get-Date
        
        if ($dueDate -lt $now -and $issue.fields.status.name -ne "Done") {
            $projectDeadlines[$project].Overdue++
        }
        elseif ($dueDate -ge $now -and $dueDate -le $now.AddDays(7) -and $issue.fields.status.name -ne "Done") {
            $projectDeadlines[$project].DueThisWeek++
        }
        elseif ($dueDate -gt $now.AddDays(7) -and $dueDate -le $now.AddDays(14) -and $issue.fields.status.name -ne "Done") {
            $projectDeadlines[$project].DueNextWeek++
        }
    }
    
    foreach ($project in $projectDeadlines.Keys) {
        $data = $projectDeadlines[$project]
        $overdueRate = if ($data.TotalWithDueDates -gt 0) { ($data.Overdue / $data.TotalWithDueDates) * 100 } else { 0 }
        
        if ($overdueRate -gt $Thresholds.DeadlineRiskCritical) {
            Send-Alert -Title "Critical Deadline Risk" -Message "Project '$project' has critical deadline issues. Overdue rate: $([math]::Round($overdueRate, 1))%. Overdue: $($data.Overdue), Due this week: $($data.DueThisWeek), Due next week: $($data.DueNextWeek)" -Severity "Critical" -Type "Deadline Management"
        }
        elseif ($overdueRate -gt $Thresholds.DeadlineRiskWarning) {
            Send-Alert -Title "Deadline Risk Warning" -Message "Project '$project' has deadline concerns. Overdue rate: $([math]::Round($overdueRate, 1))%. Overdue: $($data.Overdue), Due this week: $($data.DueThisWeek), Due next week: $($data.DueNextWeek)" -Severity "Warning" -Type "Deadline Management"
        }
    }
}

function Monitor-PerformanceAnomalies {
    Write-Host "Monitoring performance anomalies..." -ForegroundColor Cyan
    
    $issuesData = Get-JiraData -JQL "status = Done ORDER BY updated DESC"
    if (-not $issuesData) { return }
    
    $projectPerformance = @{}
    $resolutionTimes = @()
    
    foreach ($issue in $issuesData.issues) {
        $project = $issue.fields.project.key
        if (-not $projectPerformance.ContainsKey($project)) {
            $projectPerformance[$project] = @{
                Total = 0
                ResolutionTimes = @()
            }
        }
        
        $created = [DateTime]::Parse($issue.fields.created)
        $resolved = [DateTime]::Parse($issue.fields.resolutiondate)
        $resolutionTime = ($resolved - $created).TotalDays
        
        $projectPerformance[$project].Total++
        $projectPerformance[$project].ResolutionTimes += $resolutionTime
        $resolutionTimes += $resolutionTime
    }
    
    # Calculate overall statistics
    $overallMean = if ($resolutionTimes.Count -gt 0) { ($resolutionTimes | Measure-Object -Average).Average } else { 0 }
    $overallStdDev = if ($resolutionTimes.Count -gt 1) { 
        $variance = ($resolutionTimes | ForEach-Object { [math]::Pow($_ - $overallMean, 2) } | Measure-Object -Average).Average
        [math]::Sqrt($variance)
    } else { 0 }
    
    foreach ($project in $projectPerformance.Keys) {
        $data = $projectPerformance[$project]
        if ($data.ResolutionTimes.Count -gt 0) {
            $projectMean = ($data.ResolutionTimes | Measure-Object -Average).Average
            $projectStdDev = if ($data.ResolutionTimes.Count -gt 1) {
                $variance = ($data.ResolutionTimes | ForEach-Object { [math]::Pow($_ - $projectMean, 2) } | Measure-Object -Average).Average
                [math]::Sqrt($variance)
            } else { 0 }
            
            # Detect anomalies
            if ($projectStdDev -gt 20 -or $projectMean -gt ($overallMean * 2)) {
                Send-Alert -Title "Performance Anomaly Detected" -Message "Project '$project' shows performance anomalies. Average resolution time: $([math]::Round($projectMean, 1)) days (vs overall: $([math]::Round($overallMean, 1)) days), Standard deviation: $([math]::Round($projectStdDev, 1)) days" -Severity "Warning" -Type "Performance Monitoring"
            }
        }
    }
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

Write-Host "Starting Jira Analytics Automation & Alerting System..." -ForegroundColor Green
Write-Host "Alert Type: $AlertType" -ForegroundColor Yellow
Write-Host "Notifications Enabled: $EnableNotifications" -ForegroundColor Yellow

try {
    switch ($AlertType.ToLower()) {
        "sprint" {
            Monitor-SprintProgress
        }
        "resource" {
            Monitor-ResourceOverload
        }
        "quality" {
            Monitor-QualityThresholds
        }
        "deadline" {
            Monitor-DeadlineRisks
        }
        "performance" {
            Monitor-PerformanceAnomalies
        }
        "all" {
            Monitor-SprintProgress
            Monitor-ResourceOverload
            Monitor-QualityThresholds
            Monitor-DeadlineRisks
            Monitor-PerformanceAnomalies
        }
        default {
            Write-Warning "Unknown alert type: $AlertType. Use 'all', 'sprint', 'resource', 'quality', 'deadline', or 'performance'"
        }
    }
    
    Write-Host "Monitoring completed successfully." -ForegroundColor Green
}
catch {
    Write-Error "Error during monitoring: $($_.Exception.Message)"
    Send-Alert -Title "Monitoring System Error" -Message "The Jira Analytics monitoring system encountered an error: $($_.Exception.Message)" -Severity "Critical" -Type "System Error"
}

Write-Host "Jira Analytics Automation & Alerting System finished." -ForegroundColor Green
